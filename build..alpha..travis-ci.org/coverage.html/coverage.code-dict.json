{"/home/travis/build/npmtest/node-npmtest-generator-aspnet/test.js":"/* istanbul instrument in package npmtest_generator_aspnet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-aspnet/lib.npmtest_generator_aspnet.js":"/* istanbul instrument in package npmtest_generator_aspnet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_aspnet = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_aspnet = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-aspnet/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-aspnet && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_aspnet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_aspnet\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_aspnet.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_aspnet.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_aspnet.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_aspnet.__dirname + '/lib.npmtest_generator_aspnet.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-aspnet/node_modules/generator-aspnet/app/index.js":"'use strict';\nvar yeoman = require('yeoman-generator');\nvar yosay = require('yosay');\nvar chalk = require('chalk');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar guid = require('uuid');\nvar projectName = require('vs_projectname');\nvar pckg = require('../package.json');\nvar AspnetGenerator = yeoman.generators.Base.extend({\n\n  constructor: function() {\n    yeoman.generators.Base.apply(this, arguments);\n\n    this.argument('type', { type: String, required: false, desc: 'the project type to create' });\n    this.argument('applicationName', { type: String, required: false, desc: 'the name of the application' });\n    this.argument('ui', {type: String, required: false, defaults: 'bootstrap', desc: 'the ui library to use (bootstrap OR semantic)'});\n  },\n\n\n  init: function() {\n    this.log(yosay('Welcome to the marvellous ASP.NET Core generator!'));\n    this.templatedata = {};\n  },\n\n  _checkProjectType: function() {\n    if (this.type) {\n      //normalize to lower case\n      this.type = this.type.toLowerCase();\n      var validProjectTypes = [\n        'web',\n        'console',\n        'mvc',\n        'mvcbasic',\n        'webapi',\n        'nancy',\n        'classlib',\n        'xunit',\n        'mstest',\n        'fsharp_classlib',\n        'fsharp_webapi',\n        'fsharp_console',\n        'fsharp_web',\n        'fsharp_mvcbasic',\n        'fsharp_mstest',\n        'fsharp_xunit'];\n\n      if (validProjectTypes.indexOf(this.type) === -1) {\n        //if it's not in the list, send them through the normal path\n        this.log('\"%s\" is not a valid project type', chalk.cyan(this.type));\n        this.type = undefined;\n        this.applicationName = undefined;\n      } else {\n        this.log('Creating \"%s\" project', chalk.cyan(this.type));\n      }\n    }\n  },\n\n  askFor: function() {\n    this._checkProjectType();\n    if (!this.type) {\n      var done = this.async();\n\n      var prompts = [{\n        type: 'list',\n        name: 'type',\n        message: 'What type of application do you want to create?',\n        choices: [\n          {\n            name: 'Empty Web Application',\n            value: 'web'\n          }, {\n            name: 'Empty Web Application (F#)',\n            value: 'fsharp_web'\n          }, {\n            name: 'Console Application',\n            value: 'console'\n          }, {\n            name: 'Console Application (F#)',\n            value: 'fsharp_console'\n          }, {\n            name: 'Web Application',\n            value: 'mvc'\n          }, {\n            name: 'Web Application Basic [without Membership and Authorization]',\n            value: 'mvcbasic'\n          }, {\n            name: 'Web Application Basic [without Membership and Authorization] (F#)',\n            value: 'fsharp_mvcbasic'\n          }, {\n            name: 'Web API Application',\n            value: 'webapi'\n          }, {\n            name: 'Web API Application (F#)',\n            value: 'fsharp_webapi'\n          }, {\n            name: 'Nancy ASP.NET Application',\n            value: 'nancy'\n          }, {\n            name: 'Class Library',\n            value: 'classlib'\n          }, {\n            name: 'Class Library (F#)',\n            value: 'fsharp_classlib'\n          }, {\n            name: 'Unit Test project (MSTest)',\n            value: 'mstest'\n          }, {\n            name: 'Unit Test project (xUnit.net)',\n            value: 'xunit'\n          }, {\n            name: 'Unit Test project (MSTest) (F#)',\n            value: 'fsharp_mstest'\n          }, {\n            name: 'Unit Test Project (xUnit.net) (F#)',\n            value: 'fsharp_xunit'\n          }\n        ]\n      },\n      {\n          type: 'list',\n          name: 'ui',\n          message: 'Which UI framework would you like to use?',\n          default: 'bootstrap',\n          choices: [\n            {\n              name: 'Bootstrap (3.3.7)',\n              value: 'bootstrap'\n            },\n            {\n              name: 'Semantic UI (2.2.2)',\n              value: 'semantic'\n            }\n          ],\n          when: function (answers){\n            return answers.type === 'mvc' || answers.type === 'mvcbasic';\n          }\n\n      }\n      ];\n\n      this.prompt(prompts, function (props) {\n        this.type = props.type;\n        this.ui = props.ui;\n        done();\n      }.bind(this));\n    }\n  },\n\n  _buildTemplateData: function() {\n    this.templatedata.namespace = projectName(this.applicationName);\n    this.templatedata.applicationname = this.applicationName;\n    this.templatedata.includeApplicationInsights = false;\n    this.templatedata.guid = guid.v4();\n    this.templatedata.sqlite = (this.type === 'mvc') ? true : false;\n    this.templatedata.ui = this.ui;\n    this.templatedata.version = \"1.0.0-rc4-004771\";\n    this.templatedata.dotnet = {\n      version: this.options['versionCurrent'] ?\n        pckg.dotnet.current.version : pckg.dotnet.lts.version,\n      targetFramework: this.options['versionCurrent'] ?\n        pckg.dotnet.current.targetFramework : pckg.dotnet.lts.targetFramework\n    };\n  },\n\n  askForName: function() {\n    if (!this.applicationName) {\n      var done = this.async();\n      var app = '';\n      switch (this.type) {\n        case 'web':\n          app = 'EmptyWebApplication';\n          break;\n        case 'console':\n          app = 'ConsoleApplication';\n          break;\n        case 'mvc':\n          app = 'WebApplication';\n          break;\n        case 'mvcbasic':\n          app = 'WebApplicationBasic';\n          break;\n        case 'webapi':\n          app = 'WebAPIApplication';\n          break;\n        case 'nancy':\n          app = 'NancyApplication';\n          break;\n        case 'classlib':\n          app = 'ClassLibrary';\n          break;\n        case 'mstest':\n          app = 'UnitTest';\n          break;\n        case 'xunit':\n          app = 'UnitTest';\n          break;\n        case 'fsharp_classlib':\n          app = \"ClassLibrary\";\n          break;\n        case 'fsharp_console':\n          app = \"ConsoleApplication\";\n          break;\n        case 'fsharp_webapi':\n          app = \"WebAPIApplication\";\n          break;\n        case 'fsharp_web':\n          app = \"EmptyWebApplication\";\n          break;\n        case 'fsharp_mvcbasic':\n          app = \"WebApplicationBasic\";\n          break;\n        case 'fsharp_mstest':\n          app = \"UnitTest\";\n          break;\n        case 'fsharp_xunit':\n          app = \"UnitTest\";\n          break;\n      }\n      var prompts = [{\n        name: 'applicationName',\n        message: 'What\\'s the name of your ASP.NET application?',\n        default: app\n      }];\n      this.prompt(prompts, function (props) {\n        this.applicationName = props.applicationName;\n        this._buildTemplateData();\n        done();\n      }.bind(this));\n    } else {\n      this._buildTemplateData();\n    }\n  },\n\n  writing: function() {\n    this.sourceRoot(path.join(__dirname, './templates/projects'));\n\n    switch (this.type) {\n\n      case 'web':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n\n        this.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n\n        this.template(this.sourceRoot() + '/Program.cs', this.applicationName + '/Program.cs', this.templatedata);\n\n        this.template(this.sourceRoot() + '/Startup.cs', this.applicationName + '/Startup.cs', this.templatedata);\n\n        this.template(this.sourceRoot() + '/Company.WebApplication1.csproj', this.applicationName + '/' + this.applicationName + '.csproj', this.templatedata);\n\n        this.copy(this.sourceRoot() + '/web.config', this.applicationName + '/web.config');\n\n        /// Properties\n        this.fs.copyTpl(this.templatePath('Properties/**/*'), this.applicationName + '/Properties', this.templatedata);\n        this.copy(this.sourceRoot() + '/runtimeconfig.template.json', this.applicationName + '/runtimeconfig.template.json');\n        this.fs.copy(this.sourceRoot() + '/README.md', this.applicationName + '/README.md');\n        mkdirp.sync(this.applicationName + '/wwwroot');\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n\n      case 'webapi':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        this.fs.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n        this.copy(this.sourceRoot() + '/appsettings.json', this.applicationName + '/appsettings.json');\n        this.copy(this.sourceRoot() + '/appsettings.Development.json', this.applicationName + '/appsettings.Development.json');\n        this.fs.copyTpl(this.sourceRoot() + '/Startup.cs', this.applicationName + '/Startup.cs', this.templatedata);\n        this.fs.copyTpl(this.sourceRoot() + '/Program.cs', this.applicationName + '/Program.cs', this.templatedata);\n        this.fs.copyTpl(this.sourceRoot() + '/Company.WebApplication1.csproj', this.applicationName + '/' + this.applicationName + '.csproj', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Properties/**/*'), this.applicationName + '/Properties', this.templatedata);\n        this.fs.copyTpl(this.sourceRoot() + '/Controllers/ValuesController.cs', this.applicationName + '/Controllers/ValuesController.cs', this.templatedata);\n        this.fs.copy(this.sourceRoot() + '/web.config', this.applicationName + '/web.config');\n        this.fs.copy(this.sourceRoot() + '/README.md', this.applicationName + '/README.md');\n        mkdirp.sync(this.applicationName + '/wwwroot');\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n\n      case 'mvc':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        // individual files (configs, etc)\n        this.fs.copy(this.templatePath('.bowerrc'), this.applicationName + '/.bowerrc');\n        this.fs.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n        this.fs.copyTpl(this.templatePath('appsettings.json'), this.applicationName + '/appsettings.json', this.templatedata);\n        this.fs.copyTpl(this.templatePath('appsettings.Development.json'), this.applicationName + '/appsettings.Development.json', this.templatedata);\n        this.fs.copyTpl(this.templatePath('bower.json'), this.applicationName + '/bower.json', this.templatedata);\n        this.fs.copy(this.templatePath('bundleconfig.json'), this.applicationName + '/bundleconfig.json');\n        this.fs.copy(this.templatePath('Company.WebApplication1.db'), this.applicationName + '/' + this.applicationName + '.db');\n        this.fs.copyTpl(this.templatePath('Company.WebApplication1.csproj'), this.applicationName + '/' + this.applicationName + '.csproj', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Program.cs'), this.applicationName + '/Program.cs', this.templatedata);\n        this.fs.copy(this.templatePath('README.md'), this.applicationName + '/README.md');\n        this.fs.copyTpl(this.templatePath('Startup.cs'), this.applicationName + '/Startup.cs', this.templatedata);\n        // Controllers\n        this.fs.copyTpl(this.templatePath('Controllers/AccountController.cs'), this.applicationName + '/Controllers/AccountController.cs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Controllers/HomeController.cs'), this.applicationName + '/Controllers/HomeController.cs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Controllers/ManageController.cs'), this.applicationName + '/Controllers/ManageController.cs', this.templatedata);\n        // Migrations\n        this.fs.copyTpl(this.templatePath('Data/Migrations/00000000000000_CreateIdentitySchema.Designer.cs'), this.applicationName + '/Data/Migrations/00000000000000_CreateIdentitySchema.Designer.cs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Data/Migrations/00000000000000_CreateIdentitySchema.cs'), this.applicationName + '/Data/Migrations/00000000000000_CreateIdentitySchema.cs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Data/Migrations/ApplicationDbContextModelSnapshot.cs'), this.applicationName + '/Data/Migrations/ApplicationDbContextModelSnapshot.cs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Data/ApplicationDbContext.cs'), this.applicationName + '/Data/ApplicationDbContext.cs', this.templatedata);\n        // Models\n        this.fs.copyTpl(this.templatePath('Models/ApplicationUser.cs'), this.applicationName + '/Models/ApplicationUser.cs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Models/AccountViewModels/**/*'), this.applicationName + '/Models/AccountViewModels', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Models/ManageViewModels/**/*'), this.applicationName + '/Models/ManageViewModels', this.templatedata);\n        // Properties\n        this.fs.copyTpl(this.templatePath('Properties/**/*'), this.applicationName + '/Properties', this.templatedata);\n        // Services\n        this.fs.copyTpl(this.templatePath('Services/IEmailSender.cs'), this.applicationName + '/Services/IEmailSender.cs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Services/ISmsSender.cs'), this.applicationName + '/Services/ISmsSender.cs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Services/MessageServices.cs'), this.applicationName + '/Services/MessageServices.cs', this.templatedata);\n        // Views\n        this.fs.copyTpl(this.templatePath('Views/**/*'), this.applicationName + '/Views', this.templatedata);\n        // wwwroot\n        // wwwroot - the content in the wwwroot does not include any direct references or imports\n        // So again it is copied 1-to-1 - but tests cover list of all files\n        this.fs.copy(this.templatePath('wwwroot/**/*'), this.applicationName + '/wwwroot');\n        this.fs.copy(this.templatePath('web.config'), this.applicationName + '/web.config');\n        // UI Component Overrides\n        // If the developer has placed anything in overrides/ui-module/project-type/**/* then use it\n        this.fs.copyTpl(this.templatePath('/../../overrides/' + this.ui + '/' + this.type + '/**/*'), this.applicationName + '/', this.templatedata);\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n      case 'mvcbasic':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        // individual files (configs, etc)\n        this.fs.copy(this.templatePath('.bowerrc'), this.applicationName + '/.bowerrc');\n        this.fs.copy(this.templatePath('bundleconfig.json'), this.applicationName + '/bundleconfig.json');\n        this.fs.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n        this.fs.copyTpl(this.templatePath('bower.json'), this.applicationName + '/bower.json', this.templatedata);\n        this.fs.copyTpl(this.templatePath('appsettings.json'), this.applicationName + '/appsettings.json', this.templatedata);\n        this.fs.copyTpl(this.templatePath('appsettings.Development.json'), this.applicationName + '/appsettings.Development.json', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Company.WebApplication1.csproj'), this.applicationName + '/' + this.applicationName + '.csproj', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Program.cs'), this.applicationName + '/Program.cs', this.templatedata);\n        // Properties\n        this.fs.copyTpl(this.templatePath('Properties/**/*'), this.applicationName + '/Properties', this.templatedata);\n        this.fs.copy(this.templatePath('README.md'), this.applicationName + '/README.md');\n        this.fs.copyTpl(this.templatePath('Startup.cs'), this.applicationName + '/Startup.cs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('web.config'), this.applicationName + '/web.config', this.templatedata);\n        // Controllers\n        this.fs.copyTpl(this.templatePath('Controllers/HomeController.cs'), this.applicationName + '/Controllers/HomeController.cs', this.templatedata);\n        // Views\n        this.fs.copyTpl(this.templatePath('Views/**/*'), this.applicationName + '/Views', this.templatedata);\n\n        // wwwroot - the content in the wwwroot does not include any direct references or imports\n        // So again it is copied 1-to-1 - but tests cover list of all files\n        this.fs.copy(this.templatePath('wwwroot/**/*'), this.applicationName + '/wwwroot');\n\n        // UI Component Overrides\n        // If the developer has placed anything in overrides/ui-module/project-type/**/* then use it\n        this.fs.copyTpl(this.templatePath('/../../overrides/' + this.ui + '/' + this.type + '/**/*'), this.applicationName + '/', this.templatedata);\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n      case 'nancy':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        this.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n        this.template(this.sourceRoot() + '/Startup.cs', this.applicationName + '/Startup.cs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('NancyTemplate.csproj'), this.applicationName + '/' + this.applicationName + '.csproj', this.templatedata);\n        this.template(this.sourceRoot() + '/HomeModule.cs', this.applicationName + '/HomeModule.cs', this.templatedata);\n        this.template(this.sourceRoot() + '/Program.cs', this.applicationName + '/Program.cs', this.templatedata);\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n      case 'console':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/console'));\n        this.fs.copy(path.join(__dirname, '../templates/gitignore.txt'), this.applicationName + '/.gitignore');\n        this.fs.copyTpl(this.templatePath('Program.cs'), this.applicationName + '/Program.cs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Company.ConsoleApplication1.csproj'), this.applicationName + '/' + this.applicationName + '.csproj', this.templatedata);\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n      case 'classlib':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n\n        this.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n\n        this.template(this.sourceRoot() + '/Class1.cs', this.applicationName + '/Class1.cs', this.templatedata);\n\n        this.fs.copyTpl(this.sourceRoot() + '/Company.ClassLibrary1.csproj', this.applicationName + '/' + this.applicationName + '.csproj', this.templatedata);\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n      case 'xunit':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        this.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n        this.template(this.sourceRoot() + '/UnitTest1.cs', this.applicationName + '/UnitTest1.cs', this.templatedata);\n        this.template(this.sourceRoot() + '/Company.TestProject1.csproj', this.applicationName + '/' + this.applicationName + '.csproj', this.templatedata);\n        this.copy(this.sourceRoot() + '/xunit.runner.json', this.applicationName + '/xunit.runner.json');\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n\n      case 'mstest':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        this.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n        this.template(this.sourceRoot() + '/UnitTest1.cs', this.applicationName + '/UnitTest1.cs', this.templatedata);\n        this.template(this.sourceRoot() + '/Company.TestProject1.csproj', this.applicationName + '/' + this.applicationName + '.csproj', this.templatedata);\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n\n      //F# Cases\n      case 'fsharp_classlib':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        this.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n        this.template(this.sourceRoot() + '/Library.fs', this.applicationName + '/Library.fs', this.templatedata);\n        this.fs.copyTpl(this.sourceRoot() + '/Company.ClassLibrary1.fsproj', this.applicationName + '/' + this.applicationName + '.fsproj', this.templatedata);\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n\n      case 'fsharp_console':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        this.fs.copy(path.join(__dirname, '../templates/gitignore.txt'), this.applicationName + '/.gitignore');\n        this.fs.copyTpl(this.templatePath('Program.fs'), this.applicationName + '/Program.fs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Company.ConsoleApplication1.fsproj'), this.applicationName + '/' + this.applicationName + '.fsproj', this.templatedata);\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n\n      case 'fsharp_web':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        this.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n        this.template(this.sourceRoot() + '/Program.fs', this.applicationName + '/Program.fs', this.templatedata);\n        this.template(this.sourceRoot() + '/Startup.fs', this.applicationName + '/Startup.fs', this.templatedata);\n        this.template(this.sourceRoot() + '/Company.WebApplication1.fsproj', this.applicationName + '/' + this.applicationName + '.fsproj', this.templatedata);\n        this.copy(this.sourceRoot() + '/web.config', this.applicationName + '/web.config');\n        /// Properties\n        this.fs.copyTpl(this.templatePath('Properties/**/*'), this.applicationName + '/Properties', this.templatedata);\n        this.fs.copy(this.sourceRoot() + '/README.md', this.applicationName + '/README.md');\n        this.fs.copyTpl(this.templatePath('/runtimeconfig.template.json'), this.applicationName + '/runtimeconfig.template.json', this.templatedata);\n        mkdirp.sync(this.applicationName + '/wwwroot');\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n\n      case 'fsharp_webapi':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        this.fs.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n        this.copy(this.sourceRoot() + '/appsettings.json', this.applicationName + '/appsettings.json');\n        this.copy(this.sourceRoot() + '/appsettings.Development.json', this.applicationName + '/appsettings.Development.json');\n        this.fs.copyTpl(this.sourceRoot() + '/Startup.fs', this.applicationName + '/Startup.fs', this.templatedata);\n        this.fs.copyTpl(this.sourceRoot() + '/Program.fs', this.applicationName + '/Program.fs', this.templatedata);\n        this.fs.copyTpl(this.sourceRoot() + '/Company.WebApplication1.fsproj', this.applicationName + '/' + this.applicationName + '.fsproj', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Properties/**/*'), this.applicationName + '/Properties', this.templatedata);\n        this.fs.copyTpl(this.templatePath() + '/Controllers/**/*', this.applicationName + '/Controllers', this.templatedata);\n        this.fs.copy(this.sourceRoot() + '/web.config', this.applicationName + '/web.config');\n        this.fs.copy(this.sourceRoot() + '/README.md', this.applicationName + '/README.md');\n        this.fs.copy(this.sourceRoot() + '/runtimeconfig.template.json', this.applicationName + '/runtimeconfig.template.json');\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n\n      case 'fsharp_mvcbasic':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        // individual files (configs, etc)\n        this.fs.copy(this.templatePath('.bowerrc'), this.applicationName + '/.bowerrc');\n        this.fs.copy(this.templatePath('bundleconfig.json'), this.applicationName + '/bundleconfig.json');\n        this.fs.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n        this.fs.copyTpl(this.templatePath('bower.json'), this.applicationName + '/bower.json', this.templatedata);\n        this.fs.copyTpl(this.templatePath('appsettings.json'), this.applicationName + '/appsettings.json', this.templatedata);\n        this.fs.copyTpl(this.templatePath('appsettings.Development.json'), this.applicationName + '/appsettings.Development.json', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Company.WebApplication1.fsproj'), this.applicationName + '/' + this.applicationName + '.fsproj', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Program.fs'), this.applicationName + '/Program.fs', this.templatedata);\n        // Properties\n        this.fs.copyTpl(this.templatePath('Properties/**/*'), this.applicationName + '/Properties', this.templatedata);\n        this.fs.copy(this.templatePath('README.md'), this.applicationName + '/README.md');\n        this.fs.copyTpl(this.templatePath('Startup.fs'), this.applicationName + '/Startup.fs', this.templatedata);\n        this.fs.copyTpl(this.templatePath('web.config'), this.applicationName + '/web.config', this.templatedata);\n        // Controllers\n        this.fs.copyTpl(this.templatePath('Controllers/**/*'), this.applicationName + '/Controllers', this.templatedata);\n        // Views\n        this.fs.copyTpl(this.templatePath('Views/**/*'), this.applicationName + '/Views', this.templatedata);\n\n        // wwwroot - the content in the wwwroot does not include any direct references or imports\n        // So again it is copied 1-to-1 - but tests cover list of all files\n        this.fs.copy(this.templatePath('wwwroot/**/*'), this.applicationName + '/wwwroot');\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n\n      case 'fsharp_xunit':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        this.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n        this.fs.copyTpl(this.templatePath('Company.TestProject1.fsproj'), this.applicationName + '/' + this.applicationName + '.fsproj', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Tests.fs'), this.applicationName + '/Tests.fs', this.templatedata);\n        this.fs.copy(this.sourceRoot() + '/xunit.runner.json', this.applicationName + '/xunit.runner.json');\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n\n      case 'fsharp_mstest':\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n        this.copy(this.sourceRoot() + '/../../gitignore.txt', this.applicationName + '/.gitignore');\n        this.fs.copyTpl(this.templatePath('Company.TestProject1.fsproj'), this.applicationName + '/' + this.applicationName + '.fsproj', this.templatedata);\n        this.fs.copyTpl(this.templatePath('Tests.fs'), this.applicationName + '/Tests.fs', this.templatedata);\n        this.fs.copy(this.sourceRoot() + '/xunit.runner.json', this.applicationName + '/xunit.runner.json');\n        this.template(this.sourceRoot() + '/../../global.json', this.applicationName + '/global.json', this.templatedata);\n        break;\n\n      default:\n        this.log('Unknown project type');\n    }\n  },\n\n  /**\n   * Called on the very end of Yo execution\n   * Dependencies are installed only for web type\n   * of projects that depends on client side libraries\n   * and tools like Gulp or Grunt\n   * Uses can skip installing dependencies using built-in yo\n   * --skip-install option\n   */\n  end: function() {\n    if(!this.options['skip-install'] && (this.type === 'mvc' || this.type === 'mvcbasic' || this.type === \"fsharp_mvcbasic\")) {\n      process.chdir(this.applicationName);\n      this.installDependencies({\n        npm: false,\n        bower: true,\n        callback: this._showUsageHints.bind(this)\n      });\n    } else {\n      this._showUsageHints();\n    }\n  },\n\n  /**\n   * Shows usage hints to end user\n   * Called on the very end of all processes\n   */\n  _showUsageHints: function() {\n    this.log('\\r\\n');\n    this.log('Your project is now created, you can use the following commands to get going');\n    this.log(chalk.green('    cd \"' + this.applicationName + '\"'));\n    this.log(chalk.green('    dotnet restore'));\n    this.log(chalk.green('    dotnet build') + ' (optional, build will also happen when it\\'s run)');\n    if(this.type === 'mvc') {\n      this.log(chalk.green('    dotnet ef database update') + ' (to create the SQLite database for the project)');\n    }\n    switch (this.type) {\n      case 'console':\n        this.log(chalk.green('    dotnet run'));\n        break;\n      case 'web':\n      case 'nancy':\n      case 'mvc':\n      case 'webapi':\n      case 'mvcbasic':\n      case 'fsharp_console':\n      case 'fsharp_webapi':\n      case 'fsharp_mvcbasic':\n      case 'fsharp_web':\n        this.log(chalk.green('    dotnet run'));\n        break;\n      case 'xunit':\n      case 'fsharp_mstest':\n      case 'fsharp_xunit':\n        this.log(chalk.green('    dotnet test'));\n        break;\n    }\n\n    this.log('\\r\\n');\n  }\n});\n\nmodule.exports = AspnetGenerator;\n","/home/travis/build/npmtest/node-npmtest-generator-aspnet/node_modules/generator-aspnet/configuration.js":"var findup = require('findup-sync');\nvar path = require('path');\nvar abstractionsStr = '.Abstractions';\n\nfunction getBaseNamespace(fs) {\n  'use strict';\n\n  var projectJsonPath = module.exports.getProjectJsonPath();\n\n  if (!projectJsonPath) {\n    return 'MyNamespace';\n  }\n\n  var projectJson = require(projectJsonPath);\n  if (projectJson && projectJson.tooling && projectJson.tooling.defaultNamespace) {\n    return projectJson.tooling.defaultNamespace;\n  }\n\n  var projectPath = path.resolve(path.dirname(projectJsonPath));\n  var namespace = path.basename(projectPath);\n  // If it ends in .Abstractions, we want the common namespace by default.\n  if (namespace.indexOf(abstractionsStr) === namespace.length - abstractionsStr.length) {\n    namespace = namespace.substr(0, namespace.length - abstractionsStr.length);\n  }\n  return namespace;\n}\n\nmodule.exports = {\n  // Get the namespace relative to the cwd\n  getNamespace: function(fs) {\n    'use strict';\n\n    var baseNamespace = getBaseNamespace(fs);\n    var cwd = process.cwd();\n    var baseDirectory = path.resolve(path.dirname(this.getProjectJsonPath() || ''));\n    var relativePath = path.relative(baseDirectory, cwd);\n    if (relativePath) {\n      return [baseNamespace].concat(relativePath.split(path.sep)).join('.');\n    }\n\n    return baseNamespace;\n  },\n  getProjectJsonPath: function() {\n    'use strict';\n\n    return findup('project.json');\n  },\n  getProjectJson: function(fs) {\n    'use strict';\n\n    var path = module.exports.getProjectJsonPath();\n    if (!path) {\n      return {};\n    }\n\n    return fs.readJSON(path, {});\n  },\n  getGlobalJsonPath: function() {\n    'use strict';\n\n    return findup('global.json');\n  },\n  getGlobalJson: function(fs) {\n    'use strict';\n\n    var path = module.exports.getGlobalJsonPath(path);\n    if (!path) {\n      return {};\n    }\n\n    return fs.readJSON(path, {});\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-generator-aspnet/node_modules/generator-aspnet/script-base-basic.js":"'use strict';\nvar util = require('util');\nvar path = require('path');\nvar yeoman = require('yeoman-generator');\nvar chalk = require('chalk');\n\nvar Generator = module.exports = function Generator() {\n  yeoman.generators.Base.apply(this, arguments);\n  this.sourceRoot(path.join(__dirname, './templates/'));\n\n  this.namespace = function() {\n    return require('./configuration').getNamespace(this.fs);\n  }.bind(this);\n};\n\nutil.inherits(Generator, yeoman.generators.Base);\n\nGenerator.prototype.generateStandardFile = function(sourceFile, targetFile) {\n  this.log('You called the aspnet subgenerator with the arg: ' + chalk.green(this.arguments[0] || targetFile));\n  this.fs.copy(this.templatePath(sourceFile), this.destinationPath(targetFile));\n  this.log(chalk.green(targetFile) + ' created.');\n};\n\nGenerator.prototype.generateTemplateFile = function(templateFile, targetFile, templateData) {\n  this.log('You called the aspnet subgenerator with the arg ' + templateFile);\n  if (templateData !== null) {\n    this.fs.copyTpl(this.templatePath(templateFile), this.destinationPath(targetFile), templateData);\n  } else {\n    this.fs.copyTpl(this.templatePath(templateFile), this.destinationPath(targetFile));\n  }\n  this.log(targetFile + ' created.');\n};\n","/home/travis/build/npmtest/node-npmtest-generator-aspnet/node_modules/generator-aspnet/script-base.js":"'use strict';\nvar util = require('util');\nvar path = require('path');\nvar yeoman = require('yeoman-generator');\nvar chalk = require('chalk');\n\nvar NamedGenerator = module.exports = function NamedGenerator() {\n  yeoman.generators.NamedBase.apply(this, arguments);\n  this.sourceRoot(path.join(__dirname, './templates/'));\n\n  this.namespace = function() {\n    return require('./configuration').getNamespace(this.fs);\n  }.bind(this);\n};\n\nutil.inherits(NamedGenerator, yeoman.generators.NamedBase);\n\nNamedGenerator.prototype.generateTemplateFile = function(templateFile, extension, templateData) {\n  // the target file is created from *name* property\n  var targetFile = this.createTargetFile(extension);\n  this.log('You called the aspnet subgenerator with the arg ' + chalk.green(this.arguments[0] || targetFile));\n  if (templateData !== null) {\n    this.fs.copyTpl(this.templatePath(templateFile), this.destinationPath(targetFile), templateData);\n  } else {\n    this.fs.copyTpl(this.templatePath(templateFile), this.destinationPath(targetFile));\n  }\n  this.log(chalk.green(targetFile) + ' created.');\n};\n\n/**\n * User can type supported extension together with filename\n * when generator is called.\n * Normalize a filename based on existing *name* property and\n * expected extenion.\n * Extension should start with a dot charactaer\n * @param  {String} extension\n * @return {String} a filename based on name property and extension\n */\nNamedGenerator.prototype.createTargetFile = function(extension) {\n  var targetFile = null;\n  extension = this._normalizeExtension(extension);\n  if(path.extname(this.name) === extension) {\n    targetFile =  this.name;\n  } else {\n    targetFile = this.name + extension;\n  }\n  return targetFile;\n};\n\n/**\n * Creates class name based on name property\n * If user passed extension as part of filaname\n * removes that part from return class name\n * @param  {String} extension\n * @return {String} class name based on name property\n */\nNamedGenerator.prototype.classNameWithoutExtension = function(extension) {\n  extension = this._normalizeExtension(extension);\n  if(path.extname(this.name) === extension) {\n    return path.basename(this.name, extension);\n  }\n  return this.name;\n};\n\n/**\n * A little helper to normalize extension to '.XXXX'\n * @param  {String} extension\n * @return {String} normalized extenion\n */\nNamedGenerator.prototype._normalizeExtension = function(extension) {\n  if(extension && extension.charAt(0) !== '.') {\n    extension = '.' + extension;\n  }\n  return extension;\n};\n","/home/travis/build/npmtest/node-npmtest-generator-aspnet/node_modules/generator-aspnet/nugetconfig/index.js":"'use strict';\nvar util = require('util');\nvar ScriptBase = require('../script-base-basic.js');\n\nvar Generator = module.exports = function Generator() {\n  ScriptBase.apply(this, arguments);\n};\n\nutil.inherits(Generator, ScriptBase);\n\nGenerator.prototype.createItem = function() {\n  this.generateStandardFile('nuget.config', 'nuget.config');\n};\n"}